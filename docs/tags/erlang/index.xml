<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erlang on Erlware Blog</title>
    <link>/tags/erlang/</link>
    <description>Recent content in Erlang on Erlware Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jun 2019 09:08:10 +0000</lastBuildDate>
    
	<atom:link href="/tags/erlang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Little on Property-Based Testing with PropEr</title>
      <link>/a-prop/</link>
      <pubDate>Sat, 08 Jun 2019 09:08:10 +0000</pubDate>
      
      <guid>/a-prop/</guid>
      <description>Fred Hebert&amp;rsquo;s latest book Property-Based Testing with PropEr, Erlang and Elixir is out in a print version from The Pragmatic Programmers.
If you are like me you&amp;rsquo;ve known you need to figure out property testing for a long time now and keep putting it off. Now that there is a book, with a free version even, it is the best time to get going.
The book even details avoiding a common pitfall that I certainly fall into anytime I&amp;rsquo;ve tried picking up property based testing: attempting to shoehorn property testing in to any problem even when a regular unit test is a better fit.</description>
    </item>
    
    <item>
      <title>Rebar3: Building Docker Images</title>
      <link>/rebar3-building-docker-images/</link>
      <pubDate>Tue, 18 Sep 2018 06:09:11 +0000</pubDate>
      
      <guid>/rebar3-building-docker-images/</guid>
      <description>How I cut the time it takes to build an Erlang docker image in half. While adding support for a rebar3 option to only build dependencies and not project applications, rebar3 compile --deps_only, I realized it might already actually work for the Docker use case I had in mind.
So I gave it a try and, yup, turns out it does!
The idea is to cache a docker layer of the built dependencies to reuse if they haven&amp;rsquo;t changed.</description>
    </item>
    
    <item>
      <title>OTP-21: New sys_config_src option in relx</title>
      <link>/otp-21-new-sys_config_src-option-in-relx/</link>
      <pubDate>Thu, 21 Jun 2018 03:55:53 +0000</pubDate>
      
      <guid>/otp-21-new-sys_config_src-option-in-relx/</guid>
      <description>With the release of OTP-21 and rebar3 3.6.0, which includes a new relx 3.25.0, there is better support for dynamic configuration of releases at runtime. If you are new to this concept checkout the rebar3 docs first
No longer will you be forced to declare RELX_REPLACE_OS_VARS and convert strings to integers in your code because the sys.config file had to be valid Erlang terms when building the release.
Instead, you can use {sys_config_src, &amp;quot;config/sys.</description>
    </item>
    
    <item>
      <title>Rebar3 Hex Plugin</title>
      <link>/rebar3-hex-plugin/</link>
      <pubDate>Mon, 05 Oct 2015 19:50:56 +0000</pubDate>
      
      <guid>/rebar3-hex-plugin/</guid>
      <description>No plugin is needed for using Hex packages in your project, covered in documentation here, but at this time the plugin rebar3_hex is needed for publishing. The plugin provides support for registering with hex.pm and publishing packages. For instructions on registering see the rebar3 hex.pm documentation, here we&amp;rsquo;ll cover publishing a package with some unique features to the rebar3 plugin.
rebar3 hex cut The cut command provides some automation on top of publish.</description>
    </item>
    
    <item>
      <title>Rebar3 Features (part 6): _checkouts</title>
      <link>/rebar3-features-part-6-_checkouts-2/</link>
      <pubDate>Sat, 03 Oct 2015 22:15:36 +0000</pubDate>
      
      <guid>/rebar3-features-part-6-_checkouts-2/</guid>
      <description>In a build tool there is often a balancing act between ensuring repeatability and efficiency for the user. Wanting to make modifications on a dependency of your project is a common case of this. In rebar2 you could simply modify the source under deps/ and running rebar compile would pick those up. This meant that the contents of deps/ are not representative of the dependencies listed in rebar.config.
With rebar3 a dependency is never rebuilt, even if a source file changes.</description>
    </item>
    
    <item>
      <title>Rebar3 Auto Compile and Load Plugin</title>
      <link>/rebar3-auto-comile-and-load-plugin/</link>
      <pubDate>Sat, 26 Sep 2015 21:57:18 +0000</pubDate>
      
      <guid>/rebar3-auto-comile-and-load-plugin/</guid>
      <description>During development the Erlang shell is often used for quickly testing functionality. Erlang&amp;rsquo;s ability to reload modules while running makes this workflow even more efficient. To go a step further in removing manual intervention tools like [sync]() and [active]() have been created. These libs will listen for file modifications, recompile and reload the changed modules.
With rebar3 there is a plugin rebar3_auto which will start the shell, begin listening for modifications in the source directories of the project and recompile/reload when changes occur.</description>
    </item>
    
    <item>
      <title>Rebar3 Features (part 5): Dependency Tracking</title>
      <link>/rebar3-features-part-5-dependency-branch-handling/</link>
      <pubDate>Mon, 21 Sep 2015 19:24:21 +0000</pubDate>
      
      <guid>/rebar3-features-part-5-dependency-branch-handling/</guid>
      <description>When starting rebar3 a goal was to never again end up in a situation where rm -rf deps to get the right set of dependencies was the quickest or only way forward.
An important piece of this is the new and improved upgrade command. However, this post will cover a less visible (it isn&amp;rsquo;t a new command) improvement related to how rebar3 fetches and tracks dependencies each time the compile command is run.</description>
    </item>
    
    <item>
      <title>Rebar3 Features (part 4): Profiles</title>
      <link>/rebar3-features-part-4-profiles/</link>
      <pubDate>Mon, 21 Sep 2015 02:04:20 +0000</pubDate>
      
      <guid>/rebar3-features-part-4-profiles/</guid>
      <description>Running tests and need meck or proper? Building docs and want edown? Bundling up a target system and want to include erts and turn off relx&amp;rsquo;s dev_mode? Rebar3 now has you covered for these scenarios through profiles.
Profiles can be named with any atom, can add new items to the configuration, or prepend new options to existing elements, and multiple profiles can be combined themselves.
The two special profiles are default and global.</description>
    </item>
    
    <item>
      <title>Rebar3 features (part 3): Overrides</title>
      <link>/rebar3-features-part-3-overrides/</link>
      <pubDate>Tue, 15 Sep 2015 00:32:30 +0000</pubDate>
      
      <guid>/rebar3-features-part-3-overrides/</guid>
      <description>What do you do when a dependency has settings in its rebar.config that are causing you problems? Maybe it includes dependencies that are not needed in the general case, like meck or edown. Or it could have set a required OTP version that isn&amp;rsquo;t accurate and you want to remove. Or the app could contain C code that needs compiling and had relied on rebar2&amp;rsquo;s port compiler. These problems often lead to forks of projects, which isn&amp;rsquo;t good for anyone, so in rebar3 we&amp;rsquo;ve added a feature called overrides.</description>
    </item>
    
    <item>
      <title>Rebar3 Features (part 2): Dependency Tree</title>
      <link>/rebar3-features-part-2-dependency-tree/</link>
      <pubDate>Sat, 12 Sep 2015 21:56:08 +0000</pubDate>
      
      <guid>/rebar3-features-part-2-dependency-tree/</guid>
      <description>rebar3 tree is a new command to allow the user to view what dependency pulled in each transitive dependency. This is especially useful with rebar3&amp;rsquo;s dependency resolution strategy of &amp;ldquo;first wins&amp;rdquo;.
Thanks for pushing for this feature goes to Heinz N. Gies and inspiration comes from leiningen&amp;rsquo;s command lein deps :tree.
For an example I&amp;rsquo;ve cloned chef-server and built oc_erchef under src/oc_erchef. It is unique because it has both a top level app oc_erchef under src/ as well as additional project apps under apps/.</description>
    </item>
    
    <item>
      <title>Rebar3 Features (part 1): Local install and upgrade</title>
      <link>/rebar3-features-part-1-local-install-and-upgrade/</link>
      <pubDate>Fri, 11 Sep 2015 04:21:52 +0000</pubDate>
      
      <guid>/rebar3-features-part-1-local-install-and-upgrade/</guid>
      <description>Update January 22, 2016: The original post has been modified to reflect that the commands install and upgrade were moved from the unstable namespace to the local namespace. Also added is use of the environment variable $REBAR3_ERL_ARGS in the run script which allows the user to specify custom Erlang VM arguments like: REBAR3_ERL_ARGS=&amp;quot;+A10&amp;quot; rebar3 shell.
Rebar3 comes with a lot of new and improved features. I&amp;rsquo;ll be publishing posts here to highlight some of these features over the coming weeks.</description>
    </item>
    
    <item>
      <title>Erlang Postgres Connection Pool with Episcina</title>
      <link>/erlang-postgres-connection-pool-with-episcina/</link>
      <pubDate>Mon, 05 May 2014 02:41:52 +0000</pubDate>
      
      <guid>/erlang-postgres-connection-pool-with-episcina/</guid>
      <description>Almost exactly a year ago I was looking to merge the many forks of Will Glozer&amp;rsquo;s Postgres client for use in a project at Heroku. Instead Semiocast released their client, I gave it a try and never looked back. (But note that David Welton, a braver person than me, is working on merging the forks of epgsql at this time). I found Semiocast&amp;rsquo;s client to be clean, stable and I liked the interface better.</description>
    </item>
    
    <item>
      <title>Some Thoughts on Go and Erlang</title>
      <link>/some-thoughts-on-go-and-erlang/</link>
      <pubDate>Mon, 28 Apr 2014 01:41:16 +0000</pubDate>
      
      <guid>/some-thoughts-on-go-and-erlang/</guid>
      <description>UPDATE: I&amp;rsquo;m seeing that I did not make the point of this post clear. I am not saying Go is wrong or should change because it isn&amp;rsquo;t like Erlang. What I am attempting to show is the choices Go made that make it not an alternative to Erlang for backends where availability and low latency for high numbers of concurrent requests is a requirement. And notice I&amp;rsquo;m not writing this about a language like Julia.</description>
    </item>
    
    <item>
      <title>Projmake-mode: Flymake Replacement</title>
      <link>/projmake-mode-flymake-replacement/</link>
      <pubDate>Thu, 27 Sep 2012 23:13:47 +0000</pubDate>
      
      <guid>/projmake-mode-flymake-replacement/</guid>
      <description>There is a great new Emacs plugin from Eric Merritt that like FlyMake builds your code and highlights within Emacs any errors or warnings, but unlike FlyMake builds across the whole project. You can clone the mode from here projmake-mode
After cloning the repo to your desired location add this bit to your dot emacs file, replacing &amp;lt;PATH&amp;gt; with the path to where you cloned the repo.
[gist]3794732[/gist]
This Emacs code also uses add-hook to set projmake-mode to start for erlang-mode is loaded.</description>
    </item>
    
    <item>
      <title>Maru Models: JSON to Erlang Record with Custom Types</title>
      <link>/maru-models-json-to-erlang-record-with-custom-types/</link>
      <pubDate>Wed, 26 Sep 2012 23:43:44 +0000</pubDate>
      
      <guid>/maru-models-json-to-erlang-record-with-custom-types/</guid>
      <description>Working with Erlang for writing RESTful interfaces JSON is the communication &amp;ldquo;language&amp;rdquo; of choice. For simplifying the process of JSON to a model the backend could work with efficiently I&amp;rsquo;ve created _marumodels. This app decodes the JSON with jiffy and uses functions generated by a modified version of Ulf&amp;rsquo;s exprecs to create an Erlang record. The generated functions are created with type information from the record definition and when a property is set for the record through these functions it is first passed to the convert function of _maru_modeltypes to do any necessary processing.</description>
    </item>
    
    <item>
      <title>Getting Flymake and Rebar to Play Nice</title>
      <link>/getting-flymake-and-rebar-to-play-nice/</link>
      <pubDate>Wed, 16 May 2012 01:39:32 +0000</pubDate>
      
      <guid>/getting-flymake-and-rebar-to-play-nice/</guid>
      <description>TLDR;
Copy and paste the following into your elisp erlang-mode configuration to get flymake working with Rebar projects.
 (defun ebm-find-rebar-top-recr (dirname) (let* ((project-dir (locate-dominating-file dirname &#34;rebar.config&#34;))) (if project-dir (let* ((parent-dir (file-name-directory (directory-file-name project-dir))) (top-project-dir (if (and parent-dir (not (string= parent-dir &#34;/&#34;))) (ebm-find-rebar-top-recr parent-dir) nil))) (if top-project-dir top-project-dir project-dir)) project-dir))) (defun ebm-find-rebar-top () (interactive) (let* ((dirname (file-name-directory (buffer-file-name))) (project-dir (ebm-find-rebar-top-recr dirname))) (if project-dir project-dir (erlang-flymake-get-app-dir)))) (defun ebm-directory-dirs (dir name) &#34;Find all directories in DIR.</description>
    </item>
    
    <item>
      <title>Sinan Releases and Being Right</title>
      <link>/sinan-releases-and-being-right/</link>
      <pubDate>Sat, 05 May 2012 01:33:07 +0000</pubDate>
      
      <guid>/sinan-releases-and-being-right/</guid>
      <description>Fred, of Learn You Some Erlang for Great Good, today posted on his blog about the problems around how rebar handles releases, Rebar Releases and Being Wrong. The problems he mentions and a few others are why, despite giving it a legitimate shot, I have found rebar unusable for my workflow to be efficient and stable while adhering to OTP standards at the same time.
I suggest first reading his post, if you already use rebar, and then continuing on with the rest of this.</description>
    </item>
    
    <item>
      <title>Cowboy and Batman.js for Erlang Web Development</title>
      <link>/cowboy-and-batman-js-for-erlang-web-development/</link>
      <pubDate>Mon, 30 Apr 2012 19:59:11 +0000</pubDate>
      
      <guid>/cowboy-and-batman-js-for-erlang-web-development/</guid>
      <description>Why Cowboy and Batman.js There are a lot of Erlang web frameworks out there today. Not all are modeled after the MVC model (see Nitrogen), but I think all of them are addressing the problem the wrong way. I recently gave a presentation, slides here and the code for this example here, describing my perferred method for using Erlang for web development and why I think it is the best way to go.</description>
    </item>
    
    <item>
      <title>Erlang, Cowboy and Batman.js for Building Web Applications</title>
      <link>/erlang-cowboy-and-batman-js-for-building-web-applications/</link>
      <pubDate>Fri, 27 Apr 2012 20:11:28 +0000</pubDate>
      
      <guid>/erlang-cowboy-and-batman-js-for-building-web-applications/</guid>
      <description>I&amp;rsquo;ll have a complete walk of through using Cowboy and Batman.js to build the TodoMVC clone in a few days. For now I have the slides from my talk at the Chicago Erlang User Group:
Chicago Erlang User Group April, 4th 2012
I couldn&amp;rsquo;t get iframe embedding to work with Wordpress&amp;hellip; So if anyone knows what that is up with please comment.</description>
    </item>
    
    <item>
      <title>Erlang/OTP Release Structure</title>
      <link>/erlangotp-release-structure/</link>
      <pubDate>Mon, 23 Jan 2012 23:34:39 +0000</pubDate>
      
      <guid>/erlangotp-release-structure/</guid>
      <description>How to organize Erlang/OTP releases over on my personal blog. Worth reading if you are in the process of figuring out how to manage Erlang in your organization.</description>
    </item>
    
    <item>
      <title>New Screencast: Sinan - Building Enterprise Erlang Applications</title>
      <link>/new-screencast-sinan-building-enterprise-erlang-applications/</link>
      <pubDate>Thu, 05 Jan 2012 03:40:38 +0000</pubDate>
      
      <guid>/new-screencast-sinan-building-enterprise-erlang-applications/</guid>
      <description>[vimeo http://www.vimeo.com/34177001 w=400&amp;amp;h=220]
Sinan - Building Enterprise Application from Eric Merritt on Vimeo.</description>
    </item>
    
    <item>
      <title>Erlang DC: December 3rd, 2011</title>
      <link>/erlang-dc-december-3rd-2011/</link>
      <pubDate>Mon, 07 Nov 2011 00:06:31 +0000</pubDate>
      
      <guid>/erlang-dc-december-3rd-2011/</guid>
      <description>ErlangDC is coming up in a month and will be featuring our own Eric Merritt speaking on building enterprise applications with Erlang and Sinan, as well as other great presentations from Erlang experts. You can still submit your own proposal.
Get your tickets now!</description>
    </item>
    
    <item>
      <title>Erlang PubNub Client and Chat</title>
      <link>/erlang-pubnub-client-and-chat/</link>
      <pubDate>Sun, 10 Apr 2011 20:33:19 +0000</pubDate>
      
      <guid>/erlang-pubnub-client-and-chat/</guid>
      <description>I was thoroughly impressed with PubNub, a publish/subscribe service, when I first read their articles and played around with it some in Javascript. But obviously I need an Erlang API if I&amp;rsquo;m going to really use it! So I&amp;rsquo;ve created ePubNub.
In the ePubNub README you&amp;rsquo;ll find information on some basic usage of the application. You don&amp;rsquo;t have to do anything more than use the epubnub.erl module to publish and subscribe (by either providing a PID to send messages to or a function handler to process each).</description>
    </item>
    
    <item>
      <title>eCloudEdit Part 2: CouchDB</title>
      <link>/ecloudedit-part-2-couchdb/</link>
      <pubDate>Sat, 12 Feb 2011 23:37:34 +0000</pubDate>
      
      <guid>/ecloudedit-part-2-couchdb/</guid>
      <description>In my last post I showed the Webmachine backend to James Yu&amp;rsquo;s CloudEdit app in Backbone.js. What was left out was, where are the documents stored? Here I&amp;rsquo;ll show how this is done with CouchDB. And you can give the app a try at http://erlware.org:8080
First, a new Erlang app is needed that we&amp;rsquo;ll call ece_db.
ece_db/ &amp;#9500;&amp;#9472;&amp;#9472; doc &amp;#9500;&amp;#9472;&amp;#9472; ebin &amp;#9474;&amp;#160;&amp;#160; &amp;#9500;&amp;#9472;&amp;#9472; ece_db.app &amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; overview.edoc &amp;#9500;&amp;#9472;&amp;#9472; include &amp;#9492;&amp;#9472;&amp;#9472; src &amp;#9500;&amp;#9472;&amp;#9472; ece_db.</description>
    </item>
    
    <item>
      <title>eCloudEdit: Erlang, Webmachine and Backbone.js</title>
      <link>/ecloudedit-erlang-webmachine-and-backbone-js/</link>
      <pubDate>Wed, 09 Feb 2011 09:10:43 +0000</pubDate>
      
      <guid>/ecloudedit-erlang-webmachine-and-backbone-js/</guid>
      <description>To experiment with using a pure client-side rendering talking to an Erlang backend I&amp;rsquo;ve taken James Yu&amp;rsquo;s CloudEdit tutorial an app written with Backbone.js and Rails and converted the backend to use Webmachine and CouchDB. You can see eCloudEdit in action here. The Backbone.js code is the same so to understand that please see James&amp;rsquo; post, here I&amp;rsquo;ll describe the Erlang backend.
To begin with we setup two applications, one for handling the web interaction and a second for handling the database interaction.</description>
    </item>
    
  </channel>
</rss>