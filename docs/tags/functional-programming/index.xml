<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Erlware Blog</title>
    <link>/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on Erlware Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Sep 2012 23:13:47 +0000</lastBuildDate>
    
	<atom:link href="/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Projmake-mode: Flymake Replacement</title>
      <link>/post/projmake-mode-flymake-replacement/</link>
      <pubDate>Thu, 27 Sep 2012 23:13:47 +0000</pubDate>
      
      <guid>/post/projmake-mode-flymake-replacement/</guid>
      <description>There is a great new Emacs plugin from Eric Merritt that like FlyMake builds your code and highlights within Emacs any errors or warnings, but unlike FlyMake builds across the whole project. You can clone the mode from here projmake-mode
After cloning the repo to your desired location add this bit to your dot emacs file, replacing &amp;lt;PATH&amp;gt; with the path to where you cloned the repo.
[gist]3794732[/gist]
This Emacs code also uses add-hook to set projmake-mode to start for erlang-mode is loaded.</description>
    </item>
    
    <item>
      <title>Opa Plugin Development with a PubNub Example</title>
      <link>/post/opa-plugin-development-with-a-pubnub-example/</link>
      <pubDate>Thu, 24 Nov 2011 04:03:07 +0000</pubDate>
      
      <guid>/post/opa-plugin-development-with-a-pubnub-example/</guid>
      <description>This will be a two part series of posts on writing plugins for Opa. One of Opa&amp;rsquo;s greatest features is you write everything in the functional, staticly typed Opa language. This even includes the frontend code you&amp;rsquo;d usually do in Javascript. This means your code is less error-prone which significantly reduces the amount of time spent on debugging code.
But how do you use Javascript library X within your Opa code?</description>
    </item>
    
    <item>
      <title>Major OpaDo Speed-Up with @publish</title>
      <link>/post/major-opado-speed-up-with-publish/</link>
      <pubDate>Mon, 07 Nov 2011 07:19:48 +0000</pubDate>
      
      <guid>/post/major-opado-speed-up-with-publish/</guid>
      <description>I received a patch for OpaDo from Francois Regis Sinot that has made the hosted OpaDo http://opado.org on Dotcloud MUCH faster, adding and removing item is now instantaneous. He placed @publish around explicitly server side functions that caused adding todo items to go from 21 to 1 server calls. I thought this simple but maybe not obvious for new Opa developers (it certainly wasn&amp;rsquo;t to me!) needed a blog post so that beginners like my self may find it and be able to start using the @publish directive.</description>
    </item>
    
    <item>
      <title>Erlang DC: December 3rd, 2011</title>
      <link>/post/erlang-dc-december-3rd-2011/</link>
      <pubDate>Mon, 07 Nov 2011 00:06:31 +0000</pubDate>
      
      <guid>/post/erlang-dc-december-3rd-2011/</guid>
      <description>ErlangDC is coming up in a month and will be featuring our own Eric Merritt speaking on building enterprise applications with Erlang and Sinan, as well as other great presentations from Erlang experts. You can still submit your own proposal.
Get your tickets now!</description>
    </item>
    
    <item>
      <title>Opa Database Migrations</title>
      <link>/post/opa-database-migrations/</link>
      <pubDate>Sat, 15 Oct 2011 19:11:58 +0000</pubDate>
      
      <guid>/post/opa-database-migrations/</guid>
      <description>Nicolas Glondu posted a comment on an earlier post detailing ways for doing database migrations with Opa. I thought it was useful enough that I should put up a post around it:
 If you have complex changes in database structures in a OPA program, you have two choices :
1 – Keep both structure in your database and create a function which populates the new empty field from the other fields.</description>
    </item>
    
    <item>
      <title>OpaDo: Personal ToDo Lists</title>
      <link>/post/opado-personal-todo-lists/</link>
      <pubDate>Sat, 15 Oct 2011 17:59:01 +0000</pubDate>
      
      <guid>/post/opado-personal-todo-lists/</guid>
      <description>This is a continuation of two past posts (one, two) on my first application with Opa called OpaDo. You can try the live demo here and check out the full source code on Github
Updating OpaDo to add user accounts the project structure has been changed a bit and modularized. Below is the new project layout.
opado/
├── Makefile
├── README.md
├── dotcloud.yml
├── resources
│ ├── destroy.png
│ └── todos.</description>
    </item>
    
  </channel>
</rss>