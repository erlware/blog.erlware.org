<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Erlware Blog</title>
    <link>/tags/go/</link>
    <description>Recent content in Go on Erlware Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Apr 2014 01:41:16 +0000</lastBuildDate>
    
	<atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Some Thoughts on Go and Erlang</title>
      <link>/some-thoughts-on-go-and-erlang/</link>
      <pubDate>Mon, 28 Apr 2014 01:41:16 +0000</pubDate>
      
      <guid>/some-thoughts-on-go-and-erlang/</guid>
      <description>UPDATE: I&amp;rsquo;m seeing that I did not make the point of this post clear. I am not saying Go is wrong or should change because it isn&amp;rsquo;t like Erlang. What I am attempting to show is the choices Go made that make it not an alternative to Erlang for backends where availability and low latency for high numbers of concurrent requests is a requirement. And notice I&amp;rsquo;m not writing this about a language like Julia.</description>
    </item>
    
  </channel>
</rss>